============================================================
                        Functions
============================================================
#Simple Function
    function Get-Version {
        $PSVersionTable.PSVersion
    }

    Get-Version

#Basic Function
    function test-me($value) {
        if($value) {
            Write-Host -ForegroundColor Green "True"
        }
        else {
            Write-Host -ForegroundColor Red "Flase"
        }
    }

#List out Functions
    gci -path Functions

#Pipe Input to Simple Function
    function Say-Hello {"Hello $input"}
    "Brown" | Say-Hello

============================================================
				Functions with Parameters
============================================================
#Functions with Parameters
	function Do-Paramstuff
	{
    	param(
        	[parameter()]
        	[string]$parameter1,

        	[parameter()]
        	[string]$parameter2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	Write-Host "parameter 2 value is $parameter2"
	}
	Do-Paramstuff -parameter1 'Hello' -parameter2 'World'
	
#Function with Parameters Adding Switch Parameter
	function Do-ParamSwitchStuff
	{
    	param(
        	[parameter()]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParameter2value
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplaParameter2value.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ParamSwitchStuff 1 5 -DisplayParameter2value

#Mandatory Parameters
	function Do-ParamMandoStuff
	{
    	param(
        	[parameter(Mandatory)]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParam2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplayParam2.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ParamMandoStuff -parameter2 somevalue -DisplayParam2

============================================================
					Parameter validation
============================================================
#Parameter validation
	function Do-ValidParamStuff
	{
    	param(
        	[parameter(Mandatory)]
        	[ValidateSet('001','best')]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParam2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplayParam2.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ValidParamStuff

============================================================
					CmdletBinding
============================================================
#Basic Function without CmdletBinding
	function Do-SomethingRegular 
	{
    	[CmdletBinding()]
    	param(
        	[string]$message
    	)
    	Write-Verbose "We are going to write the messageby the user"
    	Write-Output $message
	}
	Do-SomethingRegular -message "Hello World"
	Do-SomethingRegular -message "Hello World" -Verbose

============================================================
					Advanced Functions
============================================================
#Advanced Functions Format
	function bare-bones 
	{
    	[CmdletBinding()]
    	param(
        	<Define Parameters>
    	)
    	Begin {
        	<Code>
    	}
    	Process {
        	<Code>
    	}
    	End {
        	<Code>
    	}
	}

#Basic Advanced Function
	function add-nums 
	{
    	param(
        	[Parameter(Mandatory=$true)]
        	[int32]$var1,
			
        	[Parameter(Mandatory=$true)]
        	[int32]$var2
    	)
    	Begin {
        	[int32]$sum = 0
    	}
    	Process {
        	$sum = $var1+$var2
    	}
    	End {
        	$sum
    	}
	}

# Example 2 advanced use
	function Get-IPConfig {
    	param(
        	[Switch]$IP,
        	[Switch]$Mac,
        	[Switch]$All
    	)
    	Begin {
        	Clear-Host
    	}
    	Process {
        	if ($Mac) {
            	ipconfig -all | Select-String "Physical"
        	}
        	elseif ($IP) {
            	ipconfig -all | Select-String "IPv"
        	}
        	elseif ($all) {
            	ipconfig -all
        	}
        	else {
            	ipconfig
        	}
    	}
    	End {
        	"`n " + (Get-Date).DateTime
    	}
	}

============================================================

============================================================


============================================================

============================================================


============================================================

============================================================


============================================================

============================================================


============================================================

============================================================


============================================================

============================================================


============================================================

============================================================

