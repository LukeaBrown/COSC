============================================================
                        Functions
============================================================
#Simple Function
    function Get-Version {
        $PSVersionTable.PSVersion
    }

    Get-Version

#Basic Function
    function test-me($value) {
        if($value) {
            Write-Host -ForegroundColor Green "True"
        }
        else {
            Write-Host -ForegroundColor Red "Flase"
        }
    }

#List out Functions
    gci -path Functions

#Pipe Input to Simple Function
    function Say-Hello {"Hello $input"}
    "Brown" | Say-Hello

============================================================
				Functions with Parameters
============================================================
#Functions with Parameters
	function Do-Paramstuff
	{
    	param(
        	[parameter()]
        	[string]$parameter1,

        	[parameter()]
        	[string]$parameter2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	Write-Host "parameter 2 value is $parameter2"
	}
	Do-Paramstuff -parameter1 'Hello' -parameter2 'World'
	
#Function with Parameters Adding Switch Parameter
	function Do-ParamSwitchStuff
	{
    	param(
        	[parameter()]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParameter2value
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplaParameter2value.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ParamSwitchStuff 1 5 -DisplayParameter2value

#Mandatory Parameters
	function Do-ParamMandoStuff
	{
    	param(
        	[parameter(Mandatory)]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParam2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplayParam2.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ParamMandoStuff -parameter2 somevalue -DisplayParam2

============================================================
					Parameter validation
============================================================
#Parameter validation
	function Do-ValidParamStuff
	{
    	param(
        	[parameter(Mandatory)]
        	[ValidateSet('001','best')]
        	[string]$parameter1,
			
        	[parameter()]
        	[string]$parameter2,
			
        	[parameter()]
        	[switch]$DisplayParam2
        	)
    	Write-Host "parameter 1 value is $parameter1"
    	if ($DisplayParam2.IsPresent) {
        	Write-Host "parameter 2 value is $parameter2"
    	}
	}
	Do-ValidParamStuff

============================================================
					CmdletBinding
============================================================
#Basic Function without CmdletBinding
	function Do-SomethingRegular 
	{
    	[CmdletBinding()]
    	param(
        	[string]$message
    	)
    	Write-Verbose "We are going to write the messageby the user"
    	Write-Output $message
	}
	Do-SomethingRegular -message "Hello World"
	Do-SomethingRegular -message "Hello World" -Verbose

============================================================
					Advanced Functions
============================================================
#Advanced Functions Format
	function bare-bones 
	{
    	[CmdletBinding()]
    	param(
        	<Define Parameters>
    	)
    	Begin {
        	<Code>
    	}
    	Process {
        	<Code>
    	}
    	End {
        	<Code>
    	}
	}

#Basic Advanced Function
	function add-nums 
	{
    	param(
        	[Parameter(Mandatory=$true)]
        	[int32]$var1,
			
        	[Parameter(Mandatory=$true)]
        	[int32]$var2
    	)
    	Begin {
        	[int32]$sum = 0
    	}
    	Process {
        	$sum = $var1+$var2
    	}
    	End {
        	$sum
    	}
	}

# Example 2 advanced use
	function Get-IPConfig {
    	param(
        	[Switch]$IP,
        	[Switch]$Mac,
        	[Switch]$All
    	)
    	Begin {
        	Clear-Host
    	}
    	Process {
        	if ($Mac) {
            	ipconfig -all | Select-String "Physical"
        	}
        	elseif ($IP) {
            	ipconfig -all | Select-String "IPv"
        	}
        	elseif ($all) {
            	ipconfig -all
        	}
        	else {
            	ipconfig
        	}
		
    	}
    	End {
        	"`n " + (Get-Date).DateTime
    	}
	}

============================================================
					String Manipulation
============================================================
#Special Characters
	"Here is `" quotes`""
	"Here is another `nline of text"

#Backtick Operator
	Get-Service * | Sort-Object ServiceType `
	| Format-Table name, ServiceType, Status -AutoSize

# Here-String
	$text = @"
	Here is some text with `"quotes`".
	1TB equals $(1TB / 1GB) GB.
	Variables are resolved
	"$PWD" is your current path
	"@
	$text

============================================================
						REGEX
============================================================
.
	Any character except newline

[^abc]
	All characters except one specified

[^a-z]
	All characters except ones in range specified

[abc]
	One of the characters

[a-z]
	One of the characters in range

\d
	Any number [0-9]

\D
	Any non-number

\n
	Line Break

\r
	Carriage return

\s
	Any whitespace (space, tab, new line)

\t 
	tab

\w 
	Letter, number or underline

\W 
	Non-letter, number, or underline

#Quantifiers
*
	Any

?
	None or one occurence

{n,}
	At least n occcurences

{n,m}
	At least n occurences, maximum m occurences

{n}
	Exactly n occurences

+
	One or many occurences

#Anchors
$
	End of text

^
	Start of text

\b 
	Word boundary

\B 
	No word boundary

\G 
	After last match
	
#IP Validator
	if("1.1.1.257" -as [IPAddress]){
    	"IP is valid"
	}
	Else {
    	"IP is not valid"
	}

# -f
	"{0} is here" -f $PWD
	
# -join
	"abc def" -join " "
		"abcdef"

# -split
	"abc.def" -split "."
		"abc","def"
		
# -match
	"1.0.0.1","1.1.1.1",""abc","def","ghi" -match <IPAddr Regex> 
		"1.0.0.1","1.1.1.1"

# -replace
	"Hello World" -replace "World","Tony"
    	"Hello Tony"
