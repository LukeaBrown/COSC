============================================================
				Startup Processes (sysV)
============================================================
Kernel-space processes 
	- Forked from [kthreadd] ( PID = 2 )
	- Hardware
	- Directly handleds by the kernwe
	Hav ehteir own memory space

User-space processes 
	- Forked from /sbin/init ( PID = 1 )
	

============================================================
				Kernel vs User Space
============================================================
Kernel processes
	- Run in its own memory space
	- Code running ion kernel mode have unrestricted access to processor and main memory
	
User process
	- Run in a separate memory space
	- User space refers to the parts of main memory that the user processes can access.

============================================================
					Process Ownership
============================================================
RUID (Real User ID) 
	Who you are

EUID (Effective User ID)
	Who you are running as
	
Uid < 999
	System User
Uid > 1000
	Regular user

============================================================
					System Calls
============================================================
An interaction between a process and the kernel
	
fork()
	- kernel creates a nearly identical copy of the process

exec()
	- kernel starts program, replacing the current process
	
shell -->> fork() -->> shell
				  -->> copy of shell -->> exec(ls) -->> ls


			Ring 3
		Ring 2
	Ring 1
Ring 0
	Device Drivers
		Device Drivers
			Applications

============================================================
Enumerate Processes
============================================================
View all running processes
	ps -elf
	
View all running processes and thei parent process
	ps -elf --forest
	
View all process with e certain parent process
	ps -lf --forest --ppid 2
	
View all process witouth a certain parent process
	ps -Nlf --forest --ppid 2

Interactive Output of running proceses
	top
		f - Choose fields
		L - Locate string
		
		Average over 1m, 5m, and 15m	
		load average: 1.25
	
	htop
	
	btop
		Faster updating
		Network information

============================================================
			Orphan and Zombie (defunct) Processes
============================================================
Orphan
	- Parent process exited, adopted by sbin/init with PPID of 1
	- All daemons are orphans
		
		#Close a shell/terminal and force all children to be adopted
		disown -a && exit

Zombie
	- completed process, but still has an entry in the process table, waiting on parent to acknowledge or terminate
	- Cant be killed or terminated due to already being terminated.
	- Do not use resources, but do take up an entry of the process table which is a finite resource
	
Fork bomb
	- Denial-of-service attack wherein a process continually replicates itself to deplete available system resources

============================================================
					Daemons (Services)
============================================================
Program that runs as a background process

Daemons
	- All daemons are Orphans, but all orphans are not Daemons
	- Purpose is to manage/monitor a service: {status, start, restart}
	
	Persistance
		Daemons are service that should run for duration of system operation, since init is parent, would require shutdown for parent to die

============================================================
						Cron Jobs
============================================================
cron daemon checks the directories once a minute and executes any commands specified that match the time
	- /var/spool/cron
	- /etc/cron.d
	- /etc/crontab

Two types of cron jobs:
	System Cron Jobs:
		- run as root and rigidly scheduled
		- perform system-wide maintenance tasks
		- controlled by /etc/crontab
	
	User Cron Jobs:
		- Use 'crontab’ command to create user cron jobs
		- stored in /var/spool/cron/crontabs/
		
			    ‘crontab -u [user] file’ - sets users crontab file to the contents of listed file

    			‘crontab -l -u [user]’ - Displays user’s crontab contents

				‘crontab -r -u [user]’ - Removes user’s crontab contents

    			‘crontab -e -u [user]’ - edits user’s crontab contents

    			crontab jobs run with the permissions of the owner of the crontab file
			
View users crontab
	crontab -l
View others users crontab
	crontab -l -u <username>
	
	
	root		cron -f (Parent Process)
	root		CRON -f (Child Process)
	student		<job>

============================================================
				Open files for a command
============================================================

sudo lsof -c <command>
Fields to look at
	Command	Name

Pay attention to numbered files
	Numbered in order of when they were opened
	0 - STDERROR
	1 - STDIN
	2 - STDOUT
	
View open network sockets
	ls -l /proc/net/
	cat /proc/net/<tcp or udp>
	
