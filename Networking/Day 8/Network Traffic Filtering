============================================================
		What Devices Are Used to Filter Traffic?
============================================================
Switch
	PACL & VACL
		Layer 2
	ACL
		Layer 3
		
Router
	ACL
		Layers 3 & 4
		
Proxies
	Content based such as: URL & DNS blacklists
	MIME filtering
	Content keyword filtering
		Layers 3-7
		
Intrusion Detection & Prevention Systems
	Signatures
		Layers 3-7
		
Host Based Firewall
	Rules
		Layers 3-7
		
Network Firewall
	Rules
	Packet Filtering (stateless)
		Layers 3 & 4
	Stateful (Connection based)
		Layers 3 & 4
	Application Layer FW
		Layers 3-7
	Next Generation FW
		Layers 3-7

============================================================
					Filtering Concepts
============================================================
Whitelist vs Blacklist
Default policies and Implicit and Explicit rules
Network Device Operation Modes
	- Routed
		Router is a hop
	- Transparent
		Router is not considered a hop
Intrusion Defense
	- Intrusion Detection Systems
	- Intrusion Prevention Systems
Filtering Device Placement 
Firewall Filtering Methods
	- Stateless (Packet) Filtering (L3+4)
	- Stateful Inspection (L4)
	- Application Layer (L7)

============================================================
					Traffic Directions
============================================================
Traffic originating from the localhost to the remote-host


Return traffic from thst remote-host back to the localhost


Traffic originating from the remote-host to the localhost


Return traffic from the localhost back to the remote-host


============================================================
					Host Based Filter
============================================================
Netfilter Framework
	Made to porvide:
		- packet filtering
		- stateless/stateful Firewalls
		- Network address and port translation (NAT and PAT)
		- Other packet manipulation
		
Netfilter Hooks
	- NF_IP_PRE_ROUTING -> PREROUTING
	- NF_IP_LOCAL_IN -> INPUT
	- NF_IP_FORWARD -> FORWARD
	- NF_IP_LOCAL_OUT -> OUTPUT
	- NF_IP_POST_ROUTING -> POSTROUTING
	
Netfilter Paradigm
	tables - contain chains
	chains - contain rules
	rules - dictate what to match and what actions to peform on packets when packets match a rule

============================================================
					Configuring IPTABLES
============================================================
Separate Applications
	    iptables - IPv4 packet administration

		ip6tables - IPv6 packet administration

		ebtables - Ethernet Bridge frame table administration

		arptables - arp packet administration

Each application had several tables and chains

    filter - default table. Provides packet filtering.

        INPUT, FORWARD, and OUTPUT

    nat - used to translate private ←→ public address and ports.

        PREROUTING, POSTROUTING, and OUTPUT

    mangle - provides special packet alteration. Can modify various fields header fields.

        All Chains: PREROUTING, POSTROUTING, INPUT, FORWARD and OUTPUT.

    raw - used to configure exemptions from connection tracking.

        PREROUTING and OUTPUT

    security - used for Mandatory Access Control (MAC) networking rules.

        INPUT, FORWARD, and OUTPUT
		
Syntax:
	sudo -t [table] -A [chain] [rules] -j [action]
	
	Rules:
	--i or -o [iface]
-s or -d [ip.add | network/mask]
-p [protocol(in ipv4 header)]

-m is used with:
  state --state [state]
  mac [--mac-source | --mac-destination] [mac]
  tcp | udp [--dport | --sport] [port | port1:port2]
  multiport [--sports | --dports | --ports]
                [port1,[port2,[port3:port15]]]
  bpf --bytecode [ 'bytecode' ]

[action] - ACCEPT, REJECT, DROP 

============================================================
					Configuring NFTABLES
============================================================
nftable families

    ip - IPv4 packets

    ip6 - IPv6 packets

    inet - IPv4 and IPv6 packets

    arp - layer 2

    bridge - processing traffic/packets traversing bridges.

    netdev - allows for user classification of packets - nftables passes up to the networking stack
    (no counterpart in iptables)

Introduces chain-types

There are three chain types:

    filter - to filter packets - can be used with arp, bridge, ip, ip6, and inet families

    route - to reroute packets - can be used with ip and ipv6 families only

    nat - used for Network Address Translation - used with ip and ip6 table families only

Creation of hooks

    PREROUTING

    POSTROUTING

    INPUT

    OUTPUT

    FORWARD

    INGRESS - used with NETDEV family only

Demonstration


IPtables & NFTables demonstration


Please follow along in your VMs
NAT
9.2
nftable familiesip - IPv4 packetsip6 - IPv6 packetsinet - IPv4 and IPv6 packetsarp - layer 2bridge - processing traffic/packets traversing bridges.netdev - allows for user classification of packets - nftables passes up to the networking stack (no counterpart in iptables)


============================================================
DEMO
============================================================
View Filter Table
	sudo iptables -L
	sudo iptables -L -n --line-numbers

View NAT Table
	sudo iptables -t nat -L
	
Flush iptables
	sudo iptables -F
	
Make rule on INPOUT chain of Filter Table
	sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT
		-A append
		-p protocol
		-J Jump to action
		
	sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT
	
Rules on A:
sudo iptables -A INPUT -p tcp --dport 22 -j ACCEPT (Inital ssh from B to A)
sudo iptables -A OUTOUT -p tcp --sport 22 -j ACCEPT (Response to B)

sudo iptables -A OUTPUT -p tcp --dport 22 -j ACCEPT (Initial connection from A to B)
sudo iptables -A INPUT -p tcp --sport 22 -j ACCEPT

Example
		22----------------------13578
	A							B
54321----------------------22

Make rule to accept ssh terminator ports, dst ports:
	sudo iptables -A INPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
	sudo iptables -A OUTPUT -p tcp -m multiport --ports 6010,6011,6012 -j ACCEPT
	
		-m matches

for CHAIN in INPUT FORWARD OUTPUT;do sudo iptables -P $CHAIN DROP; done
for CHAIN in INPUT FORWARD OUTPUT;do sudo iptables -P $CHAIN ACCEPT; done

sudo iptables -I INPUT -s 172.16.82.106 -j DROP
sudo iptables -I INPUT -d 172.16.82.106 -j DROP

sudo iptables -A INPUT -s 172.16.82.112 -j ACCEPT
sudo iptables -A OUTPUT -d 172.16.82.112 -j ACCEPT

sudo iptables -L -v

DROP Onvalid Fragments with no connection:
	sudo iptables -A INPUT -m state --state INVALID -j DROP

DROP Fragments:
	sudo iptables -A INPUT -f -j DROP
	
Throttle SYN Requests
	sudo iptables -A INPUT -i eth0 0p tcp --syn -m limit --limit 10/second -j ACCEPT

Save rules
	sudo iptables-save > ipt.conf
	
Restore rules
	sudo iptables-restore < ipt.conf -v

============================================================
watch nmap -Pn <IP_Address> -p 22
============================================================



============================================================
NFT TABLES
============================================================
Add Table
	sudo nft add table ip MYTABLE
	
List Tables
	sudo nft list tables -ann
	
Flush rules from tables
	sudo nft flush table ip MYTABLE
	
Delete table
	sudo nft delete table ip MYTABLE
	
Make base chain for input and output:
	sudo nft add chain ip MYTABLE input { type filter hook input priority 0 \; policy accept \; }
	sudo nft add chain ip MYTABLE output { type filter hook output priority 0 \; policy accept \; }
	
Make a rule
	sudo nft insert rule ip MYTABLE input tcp dport 22 accept
	sudo nft insert rule ip MYTABLE input tcp sport 22 accept
	sudo nft insert rule ip MYTABLE output tcp dport 22 accept
	sudo nft insert rule ip MYTABLE output tcp sport 22 accept
	
Change default policy
	sudo nft add rule ip MYTABLE input ip saddr 172.16.82.112 drop
	student@blue-host-1-student-9:~$ sudo nft add rule ip MYTABLE output ip daddr 172.16.82.112 drop
	student@blue-host-1-student-9:~$ sudo nft insert rule ip MYTABLE output ip daddr 10.10.0.40 accept
	student@blue-host-1-student-9:~$ sudo nft insert rule ip MYTABLE input ip saddr 10.10.0.40 accept
	
delete rule
	sudo nft delete rule ip MYTABLE input handle 7
	
Save nft config
	sudo nft list ruleset > nft.conf
	
Restore config
	

============================================================

============================================================



============================================================

============================================================


============================================================

============================================================



============================================================

============================================================


============================================================

============================================================



============================================================

============================================================


============================================================

============================================================
